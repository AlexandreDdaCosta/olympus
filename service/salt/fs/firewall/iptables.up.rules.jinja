{% set trim_blocks=True -%}
{% set hostname=grains['id'] %}
{# Template for IP tables set-up for all services.  Managed by the local supervisor. -#}
# IP tables generated for {{ hostname }} from local supervisor

*filter

# Global rules

# Start off by accepting all INPUT/OUTPUT/FORWARD
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]

# Only flush INPUT rules; this avoids conflicts with rules initiated by Docker
-F INPUT

# Accept inbound traffic for already established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow all outbound traffic
-A OUTPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT

# Allow all forwarding traffic
-A FORWARD -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

# Allow loopback traffic
-A INPUT -i lo -j ACCEPT

# Allow ping
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

# SSH supervised by Fail2ban
:fail2ban-SSH - [0:0]
-A INPUT -p tcp -m tcp --dport 22 -j fail2ban-SSH 

# Allow SSH
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT

# Server- and environment-specific rules

{% if grains.get('server') == 'interface' or grains.get('server') == 'unified' %}
# UI
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT

{%- endif %}
{%- if grains.get('server') == 'supervisor' or grains.get('server') == 'unified' %}
{%- for host, hostinfo in salt['mine.get']('*', 'grains.items').items() %}
{%- if 'server' in hostinfo %}
{%- if hostinfo['server'] == 'interface' %}
# ({{ host }}) -- interface

{% for ip in hostinfo['ipv4'] %}
{%- if pillar.ip_network in ip %}
# Backend API
-A INPUT -p tcp -m state --state NEW -m tcp --dport 4443 -s {{ ip }} -j ACCEPT
# Postgresql
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5432 -s {{ ip }} -j ACCEPT
{%- endif %}
{%- endfor %}
{%- elif hostinfo['server'] == 'unified' %}
# ({{ host }}) -- unified
{% for ip in hostinfo['ipv4'] %}
{%- if pillar.ip_network in ip %}
# Backend API
-A INPUT -p tcp -m state --state NEW -m tcp --dport 4443 -s {{ ip }} -j ACCEPT
{% endif %}
{%- endfor %}
{%- elif hostinfo['server'] == 'worker' %}
# ({{ host }}) -- worker

{% for ip in hostinfo['ipv4'] %}
{%- if pillar.ip_network in ip %}
# Backend API
-A INPUT -p tcp -m state --state NEW -m tcp --dport 4443 -s {{ ip }} -j ACCEPT
{% endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}

{%- if grains.get('server') == 'database' or grains.get('server') == 'unified' %}

{%- for host, hostinfo in salt['mine.get']('*', 'grains.items').items() %}
{%- if 'server' in hostinfo %}
{%- if hostinfo['server'] == 'interface' %}
# ({{ host }}) -- interface

{% for ip in hostinfo['ipv4'] %}
{%- if pillar.ip_network in ip %}
# pgadmin4 interface
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5050 -s {{ ip }} -j ACCEPT
# postgres
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5432 -s {{ ip }} -j ACCEPT
{% endif %}
{%- endfor %}
{%- elif hostinfo['server'] == 'unified' %}
# ({{ host }}) -- unified

{%- for ip in hostinfo['ipv4'] %}
{%- if pillar.ip_network in ip %}
# pgadmin4 interface
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5050 -s {{ ip }} -j ACCEPT
{% elif ip != '127.0.0.1' %}
{%- set ip_network = ip | regex_replace('\.\d{1,3}$', '') %}
# pgadmin4 container to postgres
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5432 -s {{ ip_network }}.0/24 -j ACCEPT
{% endif %}
{%- endfor %}
{%- elif hostinfo['server'] == 'database' %}
{%- for ip in hostinfo['ipv4'] %}
{%- if pillar.ip_network not in ip and ip != '127.0.0.1' %}
{%- set ip_network = ip | regex_replace('\.\d{1,3}$', '') %}
# pgadmin4 container to postgres
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5432 -s {{ ip_network }}.0/24 -j ACCEPT
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
# Rejections

-A INPUT -j REJECT --reject-with icmp-host-prohibited 
-A fail2ban-SSH -j RETURN

COMMIT
